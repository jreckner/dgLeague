<?xml version='1.0'?>
<CodeNarc url='http://www.codenarc.org' version='0.26.0'><Report timestamp='Oct 23, 2016 9:17:14 PM'/><Project title=''><SourceDirectory>src/main/groovy</SourceDirectory></Project><PackageSummary totalFiles='33' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></PackageSummary><Package path='com' totalFiles='33' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend' totalFiles='33' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend/yttp' totalFiles='33' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend/yttp/discgolf' totalFiles='33' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend/yttp/discgolf/configuration' totalFiles='1' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend/yttp/discgolf/domain' totalFiles='19' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend/yttp/discgolf/domain/entity' totalFiles='10' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend/yttp/discgolf/domain/web' totalFiles='9' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend/yttp/discgolf/repository' totalFiles='8' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='com/wireblend/yttp/discgolf/web' totalFiles='4' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Rules><Rule name='AddEmptyString'><Description><![CDATA[Finds empty string literals which are being added. This is an inefficient way to convert any type to a String.]]></Description></Rule><Rule name='AssertWithinFinallyBlock'><Description><![CDATA[Checks for assert statements within a finally block. An assert can throw an exception, hiding the original exception, if there is one.]]></Description></Rule><Rule name='AssignCollectionSort'><Description><![CDATA[The Collections.sort() method mutates the list and returns the list as a value. If you are assigning the result of sort() to a variable, then you probably don't realize that you're also modifying the original list as well. This is frequently the cause of subtle bugs.]]></Description></Rule><Rule name='AssignCollectionUnique'><Description><![CDATA[The Collections.unique() method mutates the list and returns the list as a value. If you are assigning the result of unique() to a variable, then you probably don't realize that you're also modifying the original list as well. This is frequently the cause of subtle bugs.]]></Description></Rule><Rule name='AssignmentInConditional'><Description><![CDATA[An assignment operator (=) was used in a conditional test. This is usually a typo, and the comparison operator (==) was intended.]]></Description></Rule><Rule name='BigDecimalInstantiation'><Description><![CDATA[Checks for calls to the BigDecimal constructors that take a double parameter, which may result in an unexpected BigDecimal value.]]></Description></Rule><Rule name='BitwiseOperatorInConditional'><Description><![CDATA[Checks for bitwise operations in conditionals, if you need to do a bitwise operation then it is best practive to extract a temp variable.]]></Description></Rule><Rule name='BooleanGetBoolean'><Description><![CDATA[This rule catches usages of java.lang.Boolean.getBoolean(String) which reads a boolean from the System properties. It is often mistakenly used to attempt to read user input or parse a String into a boolean. It is a poor piece of API to use; replace it with System.properties['prop'].]]></Description></Rule><Rule name='BracesForClass'><Description><![CDATA[Checks the location of the opening brace ({) for classes. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></Description></Rule><Rule name='BracesForForLoop'><Description><![CDATA[Checks the location of the opening brace ({) for for loops. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></Description></Rule><Rule name='BracesForIfElse'><Description><![CDATA[Checks the location of the opening brace ({) for if statements. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></Description></Rule><Rule name='BracesForMethod'><Description><![CDATA[Checks the location of the opening brace ({) for constructors and methods. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></Description></Rule><Rule name='BracesForTryCatchFinally'><Description><![CDATA[Checks the location of the opening brace ({) for try statements. By default, requires them on the line, but the sameLine property can be set to false to override this.]]></Description></Rule><Rule name='BrokenNullCheck'><Description><![CDATA[Looks for faulty checks for null that can cause a NullPointerException.]]></Description></Rule><Rule name='BrokenOddnessCheck'><Description><![CDATA[The code uses x % 2 == 1 to check to see if a value is odd, but this won't work for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check for oddness, consider using x &amp; 1 == 1, or x % 2 != 0.]]></Description></Rule><Rule name='CatchArrayIndexOutOfBoundsException'><Description><![CDATA[Check the size of the array before accessing an array element rather than catching ArrayIndexOutOfBoundsException.]]></Description></Rule><Rule name='CatchError'><Description><![CDATA[Catching Error is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></Description></Rule><Rule name='CatchException'><Description><![CDATA[Catching Exception is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='CatchIllegalMonitorStateException'><Description><![CDATA[Dubious catching of IllegalMonitorStateException. IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).]]></Description></Rule><Rule name='CatchIndexOutOfBoundsException'><Description><![CDATA[Check that an index is valid before accessing an indexed element rather than catching IndexOutOfBoundsException.]]></Description></Rule><Rule name='CatchNullPointerException'><Description><![CDATA[Catching NullPointerException is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.]]></Description></Rule><Rule name='CatchRuntimeException'><Description><![CDATA[Catching RuntimeException is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='CatchThrowable'><Description><![CDATA[Catching Throwable is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></Description></Rule><Rule name='ClassForName'><Description><![CDATA[Using Class.forName(...) is a common way to add dynamic behavior to a system. However, using this method can cause resource leaks because the classes can be pinned in memory for long periods of time.]]></Description></Rule><Rule name='ClosureAsLastMethodParameter'><Description><![CDATA[If a method is called and the last parameter is an inline closure then it can be declared outside of the method call brackets.]]></Description></Rule><Rule name='CollectAllIsDeprecated'><Description><![CDATA[collectAll{} is deprecated since Groovy 1.8.1. Use collectNested instead{}.]]></Description></Rule><Rule name='ComparisonOfTwoConstants'><Description><![CDATA[Checks for expressions where a comparison operator or equals() or compareTo() is used to compare two constants to each other or two literals that contain only constant values, e.g.: 23 == 67, Boolean.FALSE != false, 0.17 &lt;= 0.99, "abc" &gt; "ddd", [a:1] &lt;=&gt; [a:2], [1,2].equals([3,4]) or [a:false, b:true].compareTo(['a':34.5, b:Boolean.TRUE], where x is a variable.]]></Description></Rule><Rule name='ComparisonWithSelf'><Description><![CDATA[Checks for expressions where a comparison operator or equals() or compareTo() is used to compare a variable to itself, e.g.: x == x, x != x, x &lt;=&gt; x, x &lt; x, x &gt;= x, x.equals(x) or x.compareTo(x), where x is a variable.]]></Description></Rule><Rule name='ConfusingClassNamedException'><Description><![CDATA[This class is not derived from another exception, but ends with 'Exception'. This will be confusing to users of this class.]]></Description></Rule><Rule name='ConfusingMultipleReturns'><Description><![CDATA[Multiple return values can be used to set several variables at once. To use multiple return values, the left hand side of the assignment must be enclosed in parenthesis. If not, then you are not using multiple return values, you're only assigning the last element.]]></Description></Rule><Rule name='ConsecutiveLiteralAppends'><Description><![CDATA[Violations occur when method calls to append(Object) are chained together with literals as parameters. The chained calls can be joined into one invocation.]]></Description></Rule><Rule name='ConsecutiveStringConcatenation'><Description><![CDATA[Catches concatenation of two string literals on the same line. These can safely by joined.]]></Description></Rule><Rule name='ConstantAssertExpression'><Description><![CDATA[Checks for assert statements where the assert boolean condition expression is a constant or literal value.]]></Description></Rule><Rule name='ConstantIfExpression'><Description><![CDATA[Checks for if statements with a constant value for the if expression, such as true, false, null, or a literal constant value.]]></Description></Rule><Rule name='ConstantTernaryExpression'><Description><![CDATA[Checks for ternary expressions with a constant value for the boolean expression, such as true, false, null, or a literal constant value.]]></Description></Rule><Rule name='DeadCode'><Description><![CDATA[Dead code appears after a return statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted.]]></Description></Rule><Rule name='DoubleNegative'><Description><![CDATA[There is no point in using a double negative, it is always positive. For instance !!x can always be simplified to x. And !(!x) can as well.]]></Description></Rule><Rule name='DuplicateCaseStatement'><Description><![CDATA[Check for duplicate case statements in a switch block, such as two equal integers or strings.]]></Description></Rule><Rule name='DuplicateImport'><Description><![CDATA[Duplicate import statements are unnecessary.]]></Description></Rule><Rule name='DuplicateListLiteral'><Description><![CDATA[Code containing duplicate List literals can usually be improved by declaring the List as a constant field.]]></Description></Rule><Rule name='DuplicateMapKey'><Description><![CDATA[A map literal is created with duplicated key. The map entry will be overwritten.]]></Description></Rule><Rule name='DuplicateMapLiteral'><Description><![CDATA[Code containing duplicate Map literals can usually be improved by declaring the Map as a constant field.]]></Description></Rule><Rule name='DuplicateNumberLiteral'><Description><![CDATA[Code containing duplicate number literals can usually be improved by declaring the number as a constant field.  The ignoreNumbers property (0,1) can optionally specify a comma-separated list of numbers to ignore.]]></Description></Rule><Rule name='DuplicateSetValue'><Description><![CDATA[A Set literal is created with duplicate constant value. A set cannot contain two elements with the same value.]]></Description></Rule><Rule name='DuplicateStringLiteral'><Description><![CDATA[Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The ignoreStrings property () can optionally specify a comma-separated list of Strings to ignore.]]></Description></Rule><Rule name='EmptyCatchBlock'><Description><![CDATA[In most cases, exceptions should not be caught and ignored (swallowed).]]></Description></Rule><Rule name='EmptyElseBlock'><Description><![CDATA[Empty else blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyFinallyBlock'><Description><![CDATA[Empty finally blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyForStatement'><Description><![CDATA[Empty for statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyIfStatement'><Description><![CDATA[Empty if statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyInstanceInitializer'><Description><![CDATA[An empty class instance initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptyMethod'><Description><![CDATA[A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the @Override annotation.]]></Description></Rule><Rule name='EmptyStaticInitializer'><Description><![CDATA[An empty static initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptySwitchStatement'><Description><![CDATA[Empty switch statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptySynchronizedStatement'><Description><![CDATA[Empty synchronized statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyTryBlock'><Description><![CDATA[Empty try blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyWhileStatement'><Description><![CDATA[Empty while statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EqualsAndHashCode'><Description><![CDATA[If either the equals(Object) or the hashCode() methods are overridden within a class, then both must be overridden.]]></Description></Rule><Rule name='EqualsOverloaded'><Description><![CDATA[The class has an equals method, but the parameter of the method is not of type Object. It is not overriding equals but instead overloading it.]]></Description></Rule><Rule name='ExceptionExtendsError'><Description><![CDATA[Errors are system exceptions. Do not extend them.]]></Description></Rule><Rule name='ExceptionNotThrown'><Description><![CDATA[Checks for an exception constructor call without a throw as the last statement within a catch block.]]></Description></Rule><Rule name='ExplicitArrayListInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a ArrayList using the no-arg constructor. In Groovy, it is best to write "new ArrayList()" as "[]", which creates the same object.]]></Description></Rule><Rule name='ExplicitCallToAndMethod'><Description><![CDATA[This rule detects when the and(Object) method is called directly in code instead of using the &amp; operator. A groovier way to express this: a.and(b) is this: a &amp; b]]></Description></Rule><Rule name='ExplicitCallToCompareToMethod'><Description><![CDATA[This rule detects when the compareTo(Object) method is called directly in code instead of using the &lt;=&gt;, &gt;, &gt;=, &lt;, and &lt;= operators. A groovier way to express this: a.compareTo(b) is this: a &lt;=&gt; b, or using the other operators.]]></Description></Rule><Rule name='ExplicitCallToDivMethod'><Description><![CDATA[This rule detects when the div(Object) method is called directly in code instead of using the / operator. A groovier way to express this: a.div(b) is this: a / b]]></Description></Rule><Rule name='ExplicitCallToEqualsMethod'><Description><![CDATA[This rule detects when the equals(Object) method is called directly in code instead of using the == or != operator. A groovier way to express this: a.equals(b) is this: a == b and a groovier way to express : !a.equals(b) is : a != b]]></Description></Rule><Rule name='ExplicitCallToGetAtMethod'><Description><![CDATA[This rule detects when the getAt(Object) method is called directly in code instead of using the [] index operator. A groovier way to express this: a.getAt(b) is this: a[b]]]></Description></Rule><Rule name='ExplicitCallToLeftShiftMethod'><Description><![CDATA[This rule detects when the leftShift(Object) method is called directly in code instead of using the &lt;&lt; operator. A groovier way to express this: a.leftShift(b) is this: a &lt;&lt; b]]></Description></Rule><Rule name='ExplicitCallToMinusMethod'><Description><![CDATA[This rule detects when the minus(Object) method is called directly in code instead of using the - operator. A groovier way to express this: a.minus(b) is this: a - b]]></Description></Rule><Rule name='ExplicitCallToModMethod'><Description><![CDATA[This rule detects when the mod(Object) method is called directly in code instead of using the % operator. A groovier way to express this: a.mod(b) is this: a % b]]></Description></Rule><Rule name='ExplicitCallToMultiplyMethod'><Description><![CDATA[This rule detects when the minus(Object) method is called directly in code instead of using the * operator. A groovier way to express this: a.multiply(b) is this: a * b]]></Description></Rule><Rule name='ExplicitCallToOrMethod'><Description><![CDATA[This rule detects when the or(Object) method is called directly in code instead of using the | operator. A groovier way to express this: a.or(b) is this: a | b]]></Description></Rule><Rule name='ExplicitCallToPlusMethod'><Description><![CDATA[This rule detects when the plus(Object) method is called directly in code instead of using the + operator. A groovier way to express this: a.plus(b) is this: a + b]]></Description></Rule><Rule name='ExplicitCallToPowerMethod'><Description><![CDATA[This rule detects when the power(Object) method is called directly in code instead of using the ** operator. A groovier way to express this: a.power(b) is this: a ** b]]></Description></Rule><Rule name='ExplicitCallToRightShiftMethod'><Description><![CDATA[This rule detects when the rightShift(Object) method is called directly in code instead of using the &gt;&gt; operator. A groovier way to express this: a.rightShift(b) is this: a &gt;&gt; b]]></Description></Rule><Rule name='ExplicitCallToXorMethod'><Description><![CDATA[This rule detects when the xor(Object) method is called directly in code instead of using the ^ operator. A groovier way to express this: a.xor(b) is this: a ^ b]]></Description></Rule><Rule name='ExplicitGarbageCollection'><Description><![CDATA[Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.]]></Description></Rule><Rule name='ExplicitHashMapInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a HashMap using the no-arg constructor. In Groovy, it is best to write "new HashMap()" as "[:]", which creates the same object.]]></Description></Rule><Rule name='ExplicitHashSetInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a HashSet using the no-arg constructor. In Groovy, it is best to write "new HashSet()" as "[] as Set", which creates the same object.]]></Description></Rule><Rule name='ExplicitLinkedHashMapInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a LinkedHashMap using the no-arg constructor. In Groovy, it is best to write "new LinkedHashMap()" as "[:]", which creates the same object.]]></Description></Rule><Rule name='ExplicitLinkedListInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a LinkedList using the no-arg constructor. In Groovy, it is best to write "new LinkedList()" as "[] as Queue", which creates the same object.]]></Description></Rule><Rule name='ExplicitStackInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a Stack using the no-arg constructor. In Groovy, it is best to write "new Stack()" as "[] as Stack", which creates the same object.]]></Description></Rule><Rule name='ExplicitTreeSetInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a TreeSet using the no-arg constructor. In Groovy, it is best to write "new TreeSet()" as "[] as SortedSet", which creates the same object.]]></Description></Rule><Rule name='ForLoopShouldBeWhileLoop'><Description><![CDATA[A for loop without an init and update statement can be simplified to a while loop.]]></Description></Rule><Rule name='GStringAsMapKey'><Description><![CDATA[A GString should not be used as a map key since its hashcode is not guaranteed to be stable. Consider calling key.toString().]]></Description></Rule><Rule name='GetterMethodCouldBeProperty'><Description><![CDATA[If a class defines a public method that follows the Java getter notation, and returns a constant, then it is cleaner to provide a Groovy property for the value rather than a Groovy method.]]></Description></Rule><Rule name='GroovyLangImmutable'><Description><![CDATA[The groovy.lang.Immutable annotation has been deprecated and replaced by groovy.transform.Immutable. Do not use the Immutable in groovy.lang.]]></Description></Rule><Rule name='HardCodedWindowsFileSeparator'><Description><![CDATA[This rule finds usages of a Windows file separator within the constructor call of a File object. It is better to use the Unix file separator or use the File.separator constant.]]></Description></Rule><Rule name='HardCodedWindowsRootDirectory'><Description><![CDATA[This rule find cases where a File object is constructed with a windows-based path. This is not portable, and using the File.listRoots() method is a better alternative.]]></Description></Rule><Rule name='IllegalPackageReference'><Description><![CDATA[Checks for reference to any of the packages configured in packageNames.]]></Description></Rule><Rule name='IllegalRegex'><Description><![CDATA[Checks for a specified illegal regular expression within the source code. The regex property specifies the regular expression to check for. It is required and cannot be null or empty.]]></Description></Rule><Rule name='ImportFromSamePackage'><Description><![CDATA[An import of a class that is within the same package is unnecessary.]]></Description></Rule><Rule name='ImportFromSunPackages'><Description><![CDATA[Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.]]></Description></Rule><Rule name='IntegerGetInteger'><Description><![CDATA[This rule catches usages of java.lang.Integer.getInteger(String, ...) which reads an Integer from the System properties. It is often mistakenly used to attempt to read user input or parse a String into an Integer. It is a poor piece of API to use; replace it with System.properties['prop'].]]></Description></Rule><Rule name='LineLength'><Description><![CDATA[Checks the maximum length for each line of source code. It checks for number of characters, so lines that include tabs may appear longer than the allowed number when viewing the file. The maximum line length can be configured by setting the length property, which defaults to 120.]]></Description></Rule><Rule name='LoggerForDifferentClass'><Description><![CDATA[Checks for instantiating a logger (Log4J, SLF4J, Logback, Apache Commons Logging or Java Util Logging) for a class other than the current class.]]></Description></Rule><Rule name='LoggerWithWrongModifiers'><Description><![CDATA[Logger objects should be declared private, static and final. If subclasses should have access to a Logger in a parent class then the Logger should be declared protected, non-static and final. This rule find loggers that are not declared with these modifiers.]]></Description></Rule><Rule name='LoggingSwallowsStacktrace'><Description><![CDATA[If you are logging an exception then the proper API is to call error(Object, Throwable), which will log the message and the exception stack trace. If you call error(Object) then the stacktrace may not be logged.]]></Description></Rule><Rule name='MisorderedStaticImports'><Description><![CDATA[Static imports should never be declared after nonstatic imports.]]></Description></Rule><Rule name='MissingNewInThrowStatement'><Description><![CDATA[A common Groovy mistake when throwing exceptions is to forget the new keyword. For instance, "throw RuntimeException()" instead of "throw new RuntimeException()". If the error path is not unit tested then the production system will throw a Method Missing exception and hide the root cause. This rule finds constructs like "throw RuntimeException()" that look like a new keyword was meant to be used but forgotten.]]></Description></Rule><Rule name='MultipleLoggers'><Description><![CDATA[This rule catches classes that have more than one logger object defined. Typically, a class has zero or one logger objects.]]></Description></Rule><Rule name='PrintStackTrace'><Description><![CDATA[Checks for calls to printStackTrace().]]></Description></Rule><Rule name='Println'><Description><![CDATA[Checks for calls to this.print(), this.println() or this.printf().]]></Description></Rule><Rule name='RandomDoubleCoercedToZero'><Description><![CDATA[The Math.random() method returns a double result greater than or equal to 0.0 and less than 1.0. If you coerce this result into an Integer or int, then it is coerced to zero. Casting the result to int, or assigning it to an int field is probably a bug.]]></Description></Rule><Rule name='RemoveAllOnSelf'><Description><![CDATA[Don't use removeAll to clear a collection. If you want to remove all elements from a collection c, use c.clear, not c.removeAll(c). Calling c.removeAll(c) to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a ConcurrentModificationException.]]></Description></Rule><Rule name='RequiredRegex'><Description><![CDATA[Checks for a specified regular expression that must exist within the source code. The regex property specifies the regular expression to check for. It is required and cannot be null or empty.]]></Description></Rule><Rule name='RequiredString'><Description><![CDATA[Checks for a specified text string that must exist within the source code. The string property specifies the String to check for. It is required and cannot be null or empty.]]></Description></Rule><Rule name='ReturnFromFinallyBlock'><Description><![CDATA[Returning from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='ReturnNullFromCatchBlock'><Description><![CDATA[Returning null from a catch block often masks errors and requires the client to handle error codes. In some coding styles this is discouraged.]]></Description></Rule><Rule name='SpaceAfterCatch'><Description><![CDATA[Check that there is exactly one space (blank) after the catch keyword and before the opening parenthesis.]]></Description></Rule><Rule name='SpaceAfterClosingBrace'><Description><![CDATA[Check that there is at least one space (blank) or whitespace after each closing brace ("}") for method/class/interface declarations, closure expressions and block statements.]]></Description></Rule><Rule name='SpaceAfterComma'><Description><![CDATA[Checks that there is at least one space or whitespace following each comma. That includes checks for method and closure declaration parameter lists, method call parameter lists, Map literals and List literals.]]></Description></Rule><Rule name='SpaceAfterFor'><Description><![CDATA[Check that there is exactly one space (blank) after the for keyword and before the opening parenthesis.]]></Description></Rule><Rule name='SpaceAfterIf'><Description><![CDATA[Check that there is exactly one space (blank) after the if keyword and before the opening parenthesis.]]></Description></Rule><Rule name='SpaceAfterOpeningBrace'><Description><![CDATA[Check that there is at least one space (blank) or whitespace after each opening brace ("{") for method/class/interface declarations, closure expressions and block statements.]]></Description></Rule><Rule name='SpaceAfterSemicolon'><Description><![CDATA[Checks that there is at least one space or whitespace following each semicolon separating multiple statements on a single line or the clauses within a classic for loop.]]></Description></Rule><Rule name='SpaceAfterSwitch'><Description><![CDATA[Check that there is exactly one space (blank) after the switch keyword and before the opening parenthesis.]]></Description></Rule><Rule name='SpaceAfterWhile'><Description><![CDATA[Check that there is exactly one space (blank) after the while keyword and before the opening parenthesis.]]></Description></Rule><Rule name='SpaceAroundOperator'><Description><![CDATA[Check that there is at least one space (blank) or whitespace around each binary operator.]]></Description></Rule><Rule name='SpaceBeforeClosingBrace'><Description><![CDATA[Check that there is at least one space (blank) or whitespace before each closing brace ("}") for method/class/interface declarations, closure expressions and block statements.]]></Description></Rule><Rule name='SpaceBeforeOpeningBrace'><Description><![CDATA[Check that there is at least one space (blank) or whitespace before each opening brace ("{") for method/class/interface declarations, closure expressions and block statements.]]></Description></Rule><Rule name='StatelessClass'><Description><![CDATA[Checks for fields on classes that should remain "stateless" and reentrant. The ignoreFieldNames property (null) specifies one or more field names that should be ignored. The ignoreFieldTypes property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').]]></Description></Rule><Rule name='SwallowThreadDeath'><Description><![CDATA[Checks for code that catches ThreadDeath without re-throwing it.]]></Description></Rule><Rule name='SystemErrPrint'><Description><![CDATA[Checks for calls to System.err.print(), System.err.println() or System.err.printf().]]></Description></Rule><Rule name='SystemOutPrint'><Description><![CDATA[Checks for calls to System.out.print(), System.out.println() or System.out.printf().]]></Description></Rule><Rule name='ThrowError'><Description><![CDATA[Checks for throwing an instance of java.lang.Error.]]></Description></Rule><Rule name='ThrowException'><Description><![CDATA[Checks for throwing an instance of java.lang.Exception.]]></Description></Rule><Rule name='ThrowExceptionFromFinallyBlock'><Description><![CDATA[Throwing an exception from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='ThrowNullPointerException'><Description><![CDATA[Checks for throwing an instance of java.lang.NullPointerException.]]></Description></Rule><Rule name='ThrowRuntimeException'><Description><![CDATA[Checks for throwing an instance of java.lang.RuntimeException.]]></Description></Rule><Rule name='ThrowThrowable'><Description><![CDATA[Checks for throwing an instance of java.lang.Throwable.]]></Description></Rule><Rule name='UnnecessaryBigDecimalInstantiation'><Description><![CDATA[It is unnecessary to instantiate BigDecimal objects. Instead just use the decimal literal or the 'G' identifier to force the type, such as 123.45 or 123.45G.]]></Description></Rule><Rule name='UnnecessaryBigIntegerInstantiation'><Description><![CDATA[It is unnecessary to instantiate BigInteger objects. Instead just use the literal with the 'G' identifier to force the type, such as 8G or 42G.]]></Description></Rule><Rule name='UnnecessaryBooleanExpression'><Description><![CDATA[Checks for unnecessary boolean expressions, including ANDing (&amp;&amp;) or ORing (||) with true, false, null, or a Map/List/String/Number literal. Also checks for negation (!) of true, false, null, or a Map/List/String/Number literal.]]></Description></Rule><Rule name='UnnecessaryBooleanInstantiation'><Description><![CDATA[Use Boolean.valueOf() for variable values or Boolean.TRUE and Boolean.FALSE for constant values instead of calling the Boolean() constructor directly or calling Boolean.valueOf(true) or Boolean.valueOf(false).]]></Description></Rule><Rule name='UnnecessaryCallForLastElement'><Description><![CDATA[This rule checks for excessively verbose methods of accessing the last element of an array or list. For instance, it is possible to access the last element of an array by performing array[array.length - 1], in Groovy it is simpler to either call array.last() or array[-1]. The same is true for lists. This violation is triggered whenever a get, getAt, or array-style access is used with an object size check.]]></Description></Rule><Rule name='UnnecessaryCallToSubstring'><Description><![CDATA[Calling String.substring(0) always returns the original string. This code is meaningless.]]></Description></Rule><Rule name='UnnecessaryCatchBlock'><Description><![CDATA[Violations are triggered when a catch block does nothing but throw the original exception. In this scenario there is usually no need for a catch block, just let the exception be thrown from the original code. This condition frequently occurs when catching an exception for debugging purposes but then forgetting to take the catch statement out.]]></Description></Rule><Rule name='UnnecessaryCollectCall'><Description><![CDATA[Some method calls to Object.collect(Closure) can be replaced with the spread operator. For instance, list.collect { it.multiply(2) } can be replaced by list*.multiply(2). Warning: if a collection is null, collect will return an empty list, while *. will return null.]]></Description></Rule><Rule name='UnnecessaryCollectionCall'><Description><![CDATA[Useless call to collections. This call doesn't make sense. For any collection c, calling c.containsAll(c) should always be true, and c.retainAll(c) should have no effect.]]></Description></Rule><Rule name='UnnecessaryConstructor'><Description><![CDATA[This rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's public, has an empty body, and takes no arguments.]]></Description></Rule><Rule name='UnnecessaryDefInFieldDeclaration'><Description><![CDATA[If a field has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance, 'static def constraints = {}' is redundant and can be simplified to 'static constraints = {}.]]></Description></Rule><Rule name='UnnecessaryDefInMethodDeclaration'><Description><![CDATA[If a method has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance 'def private method() {}' is redundant and can be simplified to 'private method() {}'.]]></Description></Rule><Rule name='UnnecessaryDefInVariableDeclaration'><Description><![CDATA[If a variable has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance 'def private n = 2' is redundant and can be simplified to 'private n = 2'.]]></Description></Rule><Rule name='UnnecessaryDotClass'><Description><![CDATA[To make a reference to a class, it is unnecessary to specify the '.class' identifier. For instance String.class can be shortened to String.]]></Description></Rule><Rule name='UnnecessaryDoubleInstantiation'><Description><![CDATA[It is unnecessary to instantiate Double objects. Instead just use the double literal or the 'D' identifier to force the type, such as 123.45d or 0.42d.]]></Description></Rule><Rule name='UnnecessaryElseStatement'><Description><![CDATA[When an if statement block ends with a return statement the else is unnecessary. The logic in the else branch can be run without being in a new scope.]]></Description></Rule><Rule name='UnnecessaryFinalOnPrivateMethod'><Description><![CDATA[A private method is marked final. Private methods cannot be overridden, so marking it final is unnecessary.]]></Description></Rule><Rule name='UnnecessaryFloatInstantiation'><Description><![CDATA[It is unnecessary to instantiate Float objects. Instead just use the float literal with the 'F' identifier to force the type, such as 123.45F or 0.42f.]]></Description></Rule><Rule name='UnnecessaryGString'><Description><![CDATA[String objects should be created with single quotes, and GString objects created with double quotes. Creating normal String objects with double quotes is confusing to readers.]]></Description></Rule><Rule name='UnnecessaryGetter'><Description><![CDATA[Checks for explicit calls to getter/accessor methods which can, for the most part, be replaced by property access. A getter is defined as a method call that matches get[A-Z] but not getClass() or get[A-Z][A-Z] such as getURL(). Getters do not take method arguments.]]></Description></Rule><Rule name='UnnecessaryGroovyImport'><Description><![CDATA[A Groovy file does not need to include an import for classes from java.lang, java.util, java.io, java.net, groovy.lang and groovy.util, as well as the classes java.math.BigDecimal and java.math.BigInteger.]]></Description></Rule><Rule name='UnnecessaryIfStatement'><Description><![CDATA[Checks for if statements where the if and else blocks (or subsequent fall-through to a return), are merely returning true and false constants. These cases can be replaced by a simple return statement.]]></Description></Rule><Rule name='UnnecessaryInstanceOfCheck'><Description><![CDATA[This rule finds instanceof checks that cannot possibly evaluate to true. For instance, checking that (!variable instanceof String) will never be true because the result of a not expression is always a boolean.]]></Description></Rule><Rule name='UnnecessaryInstantiationToGetClass'><Description><![CDATA[Avoid instantiating an object just to call getClass() on it; use the .class public member instead.]]></Description></Rule><Rule name='UnnecessaryIntegerInstantiation'><Description><![CDATA[It is unnecessary to instantiate Integer objects. Instead just use the literal with the 'I' identifier to force the type, such as 8I or 42i.]]></Description></Rule><Rule name='UnnecessaryLongInstantiation'><Description><![CDATA[It is unnecessary to instantiate Long objects. Instead just use the literal with the 'L' identifier to force the type, such as 8L or 42L.]]></Description></Rule><Rule name='UnnecessaryModOne'><Description><![CDATA[Any expression mod 1 (exp % 1) is guaranteed to always return zero. This code is probably an error, and should be either (exp &amp; 1) or (exp % 2).]]></Description></Rule><Rule name='UnnecessaryNullCheck'><Description><![CDATA[Groovy contains the safe dereference operator, which can be used in boolean conditional statements to safely replace explicit "x == null" tests.]]></Description></Rule><Rule name='UnnecessaryNullCheckBeforeInstanceOf'><Description><![CDATA[There is no need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.]]></Description></Rule><Rule name='UnnecessaryObjectReferences'><Description><![CDATA[Violations are triggered when an excessive set of consecutive statements all reference the same variable. This can be made more readable by using a with or identity block.]]></Description></Rule><Rule name='UnnecessaryOverridingMethod'><Description><![CDATA[The overriding method merely calls the same method defined in a superclass]]></Description></Rule><Rule name='UnnecessaryPackageReference'><Description><![CDATA[Checks for explicit package reference for classes that Groovy imports by default, such as java.lang.String, java.util.Map and groovy.lang.Closure.]]></Description></Rule><Rule name='UnnecessaryParenthesesForMethodCallWithClosure'><Description><![CDATA[If a method is called and the only parameter to that method is an inline closure then the parentheses of the method call can be omitted.]]></Description></Rule><Rule name='UnnecessaryPublicModifier'><Description><![CDATA[The 'public' modifier is not required on methods or classes.]]></Description></Rule><Rule name='UnnecessarySelfAssignment'><Description><![CDATA[Method contains a pointless self-assignment to a variable or property.]]></Description></Rule><Rule name='UnnecessarySemicolon'><Description><![CDATA[Semicolons as line terminators are not required in Groovy: remove them. Do not use a semicolon as a replacement for empty braces on for and while loops; this is a confusing practice.]]></Description></Rule><Rule name='UnnecessaryStringInstantiation'><Description><![CDATA[Use a String literal (e.g., "...") instead of calling the corresponding String constructor (new String("..")) directly.]]></Description></Rule><Rule name='UnnecessarySubstring'><Description><![CDATA[This rule finds usages of String.substring(int) and String.substring(int, int) that can be replaced by use of the subscript operator. For instance, var.substring(5) can be replaced with var[5..-1].]]></Description></Rule><Rule name='UnnecessaryTernaryExpression'><Description><![CDATA[Checks for ternary expressions where the conditional expression always evaluates to a boolean and the true and false expressions are merely returning true and false constants. Also checks for ternary expressions where both expressions are the same constant or variable.]]></Description></Rule><Rule name='UnnecessaryTransientModifier'><Description><![CDATA[The field is marked as transient, but the class isn't Serializable, so marking it as transient has no effect.]]></Description></Rule><Rule name='UnusedArray'><Description><![CDATA[Checks for array allocations that are not assigned or used, unless it is the last statement within a block.]]></Description></Rule><Rule name='UnusedImport'><Description><![CDATA[Imports for a class that is never referenced within the source file is unnecessary.]]></Description></Rule><Rule name='UnusedMethodParameter'><Description><![CDATA[This rule finds instances of method parameters not being used. It does not analyze private methods (that is done by the UnusedPrivateMethodParameter rule) or methods marked @Override.]]></Description></Rule><Rule name='UnusedObject'><Description><![CDATA[Checks for object allocations that are not assigned or used, unless it is the last statement within a block.]]></Description></Rule><Rule name='UnusedPrivateField'><Description><![CDATA[Checks for private fields that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethod'><Description><![CDATA[Checks for private methods that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethodParameter'><Description><![CDATA[Checks for parameters to private methods that are not referenced within the method body.]]></Description></Rule><Rule name='UnusedVariable'><Description><![CDATA[Checks for variables that are never referenced. The ignoreVariableNames property (null) specifies one or more variable names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></Description></Rule><Rule name='UseCollectMany'><Description><![CDATA[In many case collectMany() yields the same result as collect{}.flatten(). It is easier to understand and more clearly conveys the intent.]]></Description></Rule><Rule name='UseCollectNested'><Description><![CDATA[Instead of nested collect{}-calls use collectNested{}]]></Description></Rule></Rules></CodeNarc>